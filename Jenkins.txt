pipeline {
    agent any

    stages {
        stage('Checkout from Git') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/ghadaaoun']],
                    userRemoteConfigs: [[url: 'https://github.com/abidhiaf/Projet1_devops.git']]
                ])
            }
        }

        stage('Clean and Build') {
            steps {
                sh "mvn clean package -DskipTests"
            }
        }
/*
        stage('Code Quality Check via SonarQube') {
            steps {
                sh "mvn verify sonar:sonar -Dsonar.projectKey=station -Dsonar.projectName='station' -Dsonar.host.url=http://localhost:9000 -Dsonar.login=sqa_bae98f3aa8017ac0ef61144d56af86eaa10aa993"
            }
        }

        stage('Unit Tests') {
            steps {
                sh "mvn test"
            }
        }

         
        stage('Publish to Nexus') {
            steps {
                sh 'mvn deploy:deploy-file -DgroupId=tn.esprit.spring -DartifactId=gestion-station-ski -Dversion=1.0 -DgeneratePom=true -Dpackaging=jar -DrepositoryId=maven-releases -Durl=http://localhost:8081/repository/maven-releases/ -Dfile=target/gestion-station-ski-1.0.jar'
            }
        }

        stage('Building Image') {
            steps {
                script {
                    sh 'docker build -t widedgh/spring-app:widedgharbi-5twin5-G6 .'
                }
            }
        }

        stage('login dockerhub') {
            steps {
                sh 'docker login -u widedgh --password dckr_pat_R-IkFsccABvzTdTkyotJyPfcQD0'
            }
        }

        stage('Push Docker Image') {
            steps {
                sh 'docker push widedgh/spring-app:widedgharbi-5twin5-G6'
            }
        }

       // stage('Checkout front from Git') {
        //    steps {
          //      checkout([
            //        $class: 'GitSCM',
              //      branches: [[name:'*/widedgharbi-5twin5-G6']],
                //    userRemoteConfigs: [[url: 'https://github.com/widedgharbi/frontDevops.git']]
                //])
           }
      
        stage('Run Spring && MySQL Containers') {
            steps {
                script {
                    sh 'docker compose up -d'
                }
            }
        }

    }
        
  
        post {
        always {
            cleanWs()
        }
        success {
            emailext(
                subject: "Succès - La pipeline Jenkins",
                body: """
                <html>
                <body>
                    <h1 style="color: green;">Succès de la pipeline Jenkins</h1>
                    <p>La pipeline Jenkins a été exécutée avec succès.</p>
                </body>
                </html>
                """,
                to: "gharbi.wided@esprit.tn",
                mimeType: 'text/html'
            )
        }
        failure {
            emailext(
                subject: "Échec - La pipeline Jenkins",
                body: """
                <html>
                <body>
                    <h1 style="color: red;">Échec de la pipeline Jenkins</h1>
                    <p>La pipeline Jenkins a rencontré des problèmes et a échoué.</p>
                </body>
                </html>
                """,
                to: "gharbi.wided@esprit.tn",
                mimeType: 'text/html'
            )
        }
*/

    }
}
